{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent } from \"vue\";\nexport default defineComponent({\n  name: \"HelloWorld\",\n  props: {\n    msg: String\n  },\n  setup(props, ctx) {}\n});\nvar wrapper = null; // キャンバスの親要素\nvar canvas = null; // キャンバス\nvar g = null; // コンテキスト\nvar $id = function (id) {\n  return document.getElementById(id);\n}; // DOM取得用\n// キャンバスの親要素情報取得（親要素が無いとキャンバスのサイズが画面いっぱいに表示できないため）\nwrapper = $id(\"id_container\");\n// キャンバス情報取得\ncanvas = $id(\"MyCanvas\");\ng = canvas.getContext(\"2d\");\nconst margin = 10;\nlet optMarginX, optMarginY;\nlet aside;\nlet xCount, yCount;\nlet cells = [];\nlet checkedCells = [];\nlet cellX, cellY, tmpX, tmpY;\nlet dirs = [];\nlet nextDir;\nlet wallColor, inLoop, exploreLoop;\nvar img = new Image();\nimg.src = \"../images/stone_none.png\";\nlet whitepanel = new Image();\nwhitepanel.src = \"../images/white.png\";\nlet goalpanel = new Image();\ngoalpanel.src = \"../images/Goal.png\";\nlet startpanel = new Image();\nstartpanel.src = \"../images/Start.png\";\nlet stone = new Image();\nstone.src = \"../images/maze_stone.png\";\nlet pos_stone = [1, 1];\nlet last_pos = [1, 1];\nlet stoneflag = 0;\nlet stack_path = [];\n\n// createCanvas(600, 600);\n// colorMode(HSB);\nclass Vertex {\n  constructor(i, j) {\n    this.state = true;\n    this.x = margin + optMarginX + i * aside;\n    this.y = margin + optMarginY + j * aside;\n    this.goal = false;\n    this.start = false;\n    this.stone = false;\n    this.passed = false;\n  }\n  drawPanel() {\n    if (this.state) {\n      g.drawImage(img, this.x, this.y, aside, aside);\n    } else {\n      if (this.goal) {\n        g.drawImage(goalpanel, this.x, this.y, aside, aside);\n      } else if (this.start) {\n        g.drawImage(startpanel, this.x, this.y, aside, aside);\n      } else if (this.stone) {\n        g.drawImage(stone, this.x, this.y, aside, aside);\n      } else {\n        g.drawImage(whitepanel, this.x, this.y, aside, aside);\n      }\n    }\n  }\n}\nclass Points {\n  constructor(i, j) {\n    this.x = i;\n    this.y = j;\n  }\n}\ninit();\nfunction getSize() {\n  // キャンバスのサイズを再設定\n  canvas.width = wrapper.offsetWidth;\n  canvas.height = wrapper.offsetHeight;\n}\nwindow.addEventListener(\"resize\", function () {\n  getSize();\n});\nwindow.addEventListener(\"load\", function () {\n  // キャンバスをウインドウサイズにする\n  getSize();\n\n  // sleep(2000);\n  init();\n});\nlet onceflag = true;\nfunction draw(ts) {\n  // console.log(\"draw\")\n  for (let j = 0; j < yCount; j++) {\n    for (let i = 0; i < xCount; i++) {\n      cells[i][j].drawPanel();\n    }\n  }\n  if (inLoop) {\n    digMaze();\n  } else if (exploreLoop) {\n    if (onceflag) {\n      // console.log(stack_path);\n      sleep(1000);\n      onceflag = false;\n    }\n    explore();\n  }\n  window.requestAnimationFrame(ts => draw(ts));\n}\nwindow.requestAnimationFrame(ts => draw(ts));\nfunction sleep(waitTime) {\n  let startTime = new Date();\n  while (new Date() - startTime < waitTime);\n}\nfunction digMaze() {\n  console.log(\"dig\");\n  if (dirs.length == 0) {\n    //行き詰ったとき\n    let pickNextIndex = Math.floor(Math.random() * checkedCells.length);\n    // console.log(pickNextIndex)  //開通済みの道からランダムで選ぶ\n    let othercheckedCell = checkedCells[pickNextIndex];\n    checkedCells.splice(pickNextIndex, 1); //開通済みリストから取り除く\n    if (checkedCells.length == 0) {\n      //すべて探索したら左上と右下を開通する\n      cells[0][1].state = false;\n      cells[0][1].start = true;\n      cells[0][1].passed = true;\n      cells[xCount - 1][yCount - 2].state = false;\n      cells[xCount - 1][yCount - 2].goal = true;\n      cells[1][1].stone = true;\n      cells[1][1].passed = true;\n      inLoop = false;\n      console.log(\"End\");\n    }\n    cellX = othercheckedCell.x;\n    cellY = othercheckedCell.y;\n    dirs = [0, 1, 2, 3];\n  }\n  let tmpDirIndex = Math.floor(Math.random() * dirs.length); //進む方向を抽出\n  nextDir = dirs[tmpDirIndex];\n  dirs.splice(tmpDirIndex, 1);\n  switch (nextDir) {\n    case 0:\n      tmpX = 0;\n      tmpY = -2;\n      break;\n    case 1:\n      tmpX = 2;\n      tmpY = 0;\n      break;\n    case 2:\n      tmpX = 0;\n      tmpY = 2;\n      break;\n    case 3:\n      tmpX = -2;\n      tmpY = 0;\n      break;\n    default:\n      break;\n  }\n  let nextX = cellX + tmpX,\n    nextY = cellY + tmpY;\n  let betNextX = cellX + tmpX / 2,\n    betNextY = cellY + tmpY / 2;\n  if (nextX >= 0 && nextX < xCount && nextY >= 0 && nextY < yCount) {\n    //nextが範囲内のとき\n    if (cells[nextX][nextY].state == true) {\n      //nextが壁の時\n      cells[nextX][nextY].state = false; //nextを道にする\n      cells[betNextX][betNextY].state = false; //間も道にする\n      let flag = true;\n      for (let i = 0; i < checkedCells.length; i++) {\n        if (checkedCells[i].x == cellX && checkedCells[i].y == cellY) {\n          flag = false;\n        }\n      }\n      if (flag) checkedCells.push(new Points(cellX, cellY)); //開通済みのセルに登録\n      flag = 1;\n      cellX = nextX;\n      cellY = nextY;\n      dirs = [0, 1, 2, 3]; //進む方向リセット\n    }\n  }\n  // console.log(checkedCells)\n}\nfunction push_children(x, y) {\n  if (0 < x < xCount && 0 < y < yCount) {\n    if (!cells[x][y - 1].passed && !cells[x][y - 1].state) {\n      stack_path.push([x, y - 1]);\n      // console.log(stack_path[stack_path.length-1]);\n    }\n    if (!cells[x - 1][y].passed && !cells[x - 1][y].state) {\n      stack_path.push([x - 1, y]);\n      // console.log(stack_path[stack_path.length-1]);\n    }\n    if (!cells[x][y + 1].passed && !cells[x][y + 1].state) {\n      stack_path.push([x, y + 1]);\n      // console.log(stack_path[stack_path.length-1]);\n    }\n    if (!cells[x + 1][y].passed && !cells[x + 1][y].state) {\n      stack_path.push([x + 1, y]);\n      // console.log(stack_path[stack_path.length-1]);\n    }\n  }\n}\nfunction explore() {\n  console.log(\"explore\");\n  push_children(pos_stone[0], pos_stone[1]);\n  // console.log(!cells[stack_path[stack_path.length-1][0]][stack_path[stack_path.length-1][1]].state);\n  if (!cells[stack_path[stack_path.length - 1][0]][stack_path[stack_path.length - 1][1]].state) {\n    cells[stack_path[stack_path.length - 1][0]][stack_path[stack_path.length - 1][1]].stone = true;\n    cells[stack_path[stack_path.length - 1][0]][stack_path[stack_path.length - 1][1]].passed = true;\n    cells[last_pos[0]][last_pos[1]].stone = false;\n    if (stack_path[stack_path.length - 1][0] == xCount - 2 && stack_path[stack_path.length - 1][1] == yCount - 2) {\n      exploreLoop = false;\n    }\n    pos_stone[0] = stack_path[stack_path.length - 1][0];\n    pos_stone[1] = stack_path[stack_path.length - 1][1];\n    last_pos[0] = stack_path[stack_path.length - 1][0];\n    last_pos[1] = stack_path[stack_path.length - 1][1];\n    stack_path.pop();\n  } else {\n    stack_path.pop();\n  }\n}\nfunction init() {\n  console.log(\"init load\");\n  // aside = Math.floor(Math.random(5, 40));\n  aside = 20; //1マスのサイズ\n  optMarginX = 0, optMarginY = 0;\n  dirs = [0, 1, 2, 3];\n  inLoop = true;\n  exploreLoop = true;\n  xCount = Math.floor((canvas.width - margin * 2) / aside); //横数\n  // xCount = 9;\n  if (xCount % 2 == 0) {\n    xCount--;\n    optMarginX = aside / 2;\n  }\n  yCount = Math.floor((canvas.height - margin * 2) / aside); //縦数\n  if (yCount % 2 == 0) {\n    yCount--;\n    optMarginY = aside / 2;\n  }\n  cells = Array.from(new Array(xCount), () => new Array(yCount).fill(null)); //縦＊横のnull行列\n  for (let j = 0; j < yCount; j++) {\n    for (let i = 0; i < xCount; i++) {\n      cells[i][j] = new Vertex(i, j);\n    }\n  }\n  cellX = Math.floor(Math.random() * (xCount - 2) + 1);\n  if (cellX % 2 == 0) {\n    cellX++;\n  }\n  cellY = Math.floor(Math.random() * (yCount - 2) + 1);\n  if (cellY % 2 == 0) {\n    cellY++;\n  }\n  cells[cellX][cellY].state = false;\n  checkedCells.push(new Points(cellX, cellY));\n}","map":{"version":3,"names":["defineComponent","name","props","msg","String","setup","ctx","wrapper","canvas","g","$id","id","document","getElementById","getContext","margin","optMarginX","optMarginY","aside","xCount","yCount","cells","checkedCells","cellX","cellY","tmpX","tmpY","dirs","nextDir","wallColor","inLoop","exploreLoop","img","Image","src","whitepanel","goalpanel","startpanel","stone","pos_stone","last_pos","stoneflag","stack_path","Vertex","constructor","i","j","state","x","y","goal","start","passed","drawPanel","drawImage","Points","init","getSize","width","offsetWidth","height","offsetHeight","window","addEventListener","onceflag","draw","ts","digMaze","sleep","explore","requestAnimationFrame","waitTime","startTime","Date","console","log","length","pickNextIndex","Math","floor","random","othercheckedCell","splice","tmpDirIndex","nextX","nextY","betNextX","betNextY","flag","push","push_children","pop","Array","from","fill"],"sources":["/app/vue-sample/src/components/MazeGenerator.vue"],"sourcesContent":["<template>\n  <div\n    class=\"container mx-auto\"\n    id=\"id_container\"\n    style=\"text-align: center; width: 95%; height: 70%; margin: 0 auto\"\n  >\n    <canvas width=\"\" height=\"\" id=\"MyCanvas\"></canvas>\n  </div>\n</template>\n<script lang=\"js\">\n  import { defineComponent } from \"vue\";\n\n  export default defineComponent({\n    name: \"HelloWorld\",\n    props: {\n      msg: String,\n    },\n    setup(props, ctx) {\n\n    }\n  });\n     var wrapper = null; // キャンバスの親要素\n     var canvas = null; // キャンバス\n     var g = null; // コンテキスト\n     var $id = function (id) {\n       return document.getElementById(id);\n     }; // DOM取得用\n     // キャンバスの親要素情報取得（親要素が無いとキャンバスのサイズが画面いっぱいに表示できないため）\n     wrapper = $id(\"id_container\");\n     // キャンバス情報取得\n     canvas = $id(\"MyCanvas\");\n     g = canvas.getContext(\"2d\");\n     const margin = 10;\n     let optMarginX, optMarginY;\n     let aside;\n     let xCount, yCount;\n     let cells = [];\n     let checkedCells = [];\n     let cellX, cellY, tmpX, tmpY;\n     let dirs = [];\n     let nextDir;\n     let wallColor, inLoop, exploreLoop;\n     var img = new Image();\n     img.src = \"../images/stone_none.png\";\n     let whitepanel = new Image();\n     whitepanel.src = \"../images/white.png\";\n     let goalpanel = new Image();\n     goalpanel.src = \"../images/Goal.png\";\n     let startpanel = new Image();\n     startpanel.src = \"../images/Start.png\";\n     let stone = new Image();\n     stone.src = \"../images/maze_stone.png\";\n     let pos_stone = [1, 1];\n     let last_pos = [1, 1];\n\n     let stoneflag = 0;\n     let stack_path = [];\n\n     // createCanvas(600, 600);\n     // colorMode(HSB);\n     class Vertex {\n       constructor(i, j) {\n         this.state = true;\n         this.x = margin + optMarginX + i * aside;\n         this.y = margin + optMarginY + j * aside;\n         this.goal = false;\n         this.start = false;\n         this.stone = false;\n         this.passed = false;\n       }\n\n       drawPanel() {\n         if (this.state) {\n           g.drawImage(img, this.x, this.y, aside, aside);\n         } else {\n           if (this.goal) {\n             g.drawImage(goalpanel, this.x, this.y, aside, aside);\n           } else if (this.start) {\n             g.drawImage(startpanel, this.x, this.y, aside, aside);\n           } else if (this.stone) {\n             g.drawImage(stone, this.x, this.y, aside, aside);\n           } else {\n             g.drawImage(whitepanel, this.x, this.y, aside, aside);\n           }\n         }\n       }\n     }\n\n     class Points {\n       constructor(i, j) {\n         this.x = i;\n         this.y = j;\n       }\n     }\n     init();\n     function getSize() {\n       // キャンバスのサイズを再設定\n       canvas.width = wrapper.offsetWidth;\n       canvas.height = wrapper.offsetHeight;\n     }\n\n     window.addEventListener(\"resize\", function () {\n       getSize();\n     });\n\n     window.addEventListener(\"load\", function () {\n       // キャンバスをウインドウサイズにする\n       getSize();\n\n       // sleep(2000);\n       init();\n     });\n     let onceflag = true;\n     function draw(ts) {\n       // console.log(\"draw\")\n       for (let j = 0; j < yCount; j++) {\n         for (let i = 0; i < xCount; i++) {\n           cells[i][j].drawPanel();\n         }\n       }\n       if (inLoop) {\n         digMaze();\n       } else if (exploreLoop) {\n         if (onceflag) {\n           // console.log(stack_path);\n           sleep(1000);\n           onceflag = false;\n         }\n         explore();\n       }\n       window.requestAnimationFrame((ts) => draw(ts));\n     }\n     window.requestAnimationFrame((ts) => draw(ts));\n    function sleep(waitTime) {\n             let startTime = new Date();\n             while (new Date() - startTime < waitTime);\n           }\n     function digMaze() {\n       console.log(\"dig\");\n       if (dirs.length == 0) {\n         //行き詰ったとき\n         let pickNextIndex = Math.floor(Math.random() * checkedCells.length);\n         // console.log(pickNextIndex)  //開通済みの道からランダムで選ぶ\n         let othercheckedCell = checkedCells[pickNextIndex];\n         checkedCells.splice(pickNextIndex, 1); //開通済みリストから取り除く\n         if (checkedCells.length == 0) {\n           //すべて探索したら左上と右下を開通する\n           cells[0][1].state = false;\n           cells[0][1].start = true;\n           cells[0][1].passed = true;\n           cells[xCount - 1][yCount - 2].state = false;\n           cells[xCount - 1][yCount - 2].goal = true;\n           cells[1][1].stone = true;\n           cells[1][1].passed = true;\n           inLoop = false;\n           console.log(\"End\");\n         }\n         cellX = othercheckedCell.x;\n         cellY = othercheckedCell.y;\n         dirs = [0, 1, 2, 3];\n       }\n       let tmpDirIndex = Math.floor(Math.random() * dirs.length); //進む方向を抽出\n       nextDir = dirs[tmpDirIndex];\n       dirs.splice(tmpDirIndex, 1);\n       switch (nextDir) {\n         case 0:\n           tmpX = 0;\n           tmpY = -2;\n           break;\n         case 1:\n           tmpX = 2;\n           tmpY = 0;\n           break;\n         case 2:\n           tmpX = 0;\n           tmpY = 2;\n           break;\n         case 3:\n           tmpX = -2;\n           tmpY = 0;\n           break;\n         default:\n           break;\n       }\n       let nextX = cellX + tmpX,\n         nextY = cellY + tmpY;\n       let betNextX = cellX + tmpX / 2,\n         betNextY = cellY + tmpY / 2;\n       if (nextX >= 0 && nextX < xCount && nextY >= 0 && nextY < yCount) {\n         //nextが範囲内のとき\n         if (cells[nextX][nextY].state == true) {\n           //nextが壁の時\n           cells[nextX][nextY].state = false; //nextを道にする\n           cells[betNextX][betNextY].state = false; //間も道にする\n           let flag = true;\n           for (let i = 0; i < checkedCells.length; i++) {\n             if (checkedCells[i].x == cellX && checkedCells[i].y == cellY) {\n               flag = false;\n             }\n           }\n           if (flag) checkedCells.push(new Points(cellX, cellY)); //開通済みのセルに登録\n           flag = 1;\n           cellX = nextX;\n           cellY = nextY;\n           dirs = [0, 1, 2, 3]; //進む方向リセット\n         }\n       }\n       // console.log(checkedCells)\n     }\n\n     function push_children(x, y) {\n       if (0 < x < xCount && 0 < y < yCount) {\n         if (!cells[x][y - 1].passed && !cells[x][y - 1].state) {\n           stack_path.push([x, y - 1]);\n           // console.log(stack_path[stack_path.length-1]);\n         }\n         if (!cells[x - 1][y].passed && !cells[x - 1][y].state) {\n           stack_path.push([x - 1, y]);\n           // console.log(stack_path[stack_path.length-1]);\n         }\n         if (!cells[x][y + 1].passed && !cells[x][y + 1].state) {\n           stack_path.push([x, y + 1]);\n           // console.log(stack_path[stack_path.length-1]);\n         }\n         if (!cells[x + 1][y].passed && !cells[x + 1][y].state) {\n           stack_path.push([x + 1, y]);\n           // console.log(stack_path[stack_path.length-1]);\n         }\n       }\n     }\n\n     function explore() {\n       console.log(\"explore\");\n       push_children(pos_stone[0], pos_stone[1]);\n       // console.log(!cells[stack_path[stack_path.length-1][0]][stack_path[stack_path.length-1][1]].state);\n       if (\n         !cells[stack_path[stack_path.length - 1][0]][\n           stack_path[stack_path.length - 1][1]\n         ].state\n       ) {\n         cells[stack_path[stack_path.length - 1][0]][\n           stack_path[stack_path.length - 1][1]\n         ].stone = true;\n         cells[stack_path[stack_path.length - 1][0]][\n           stack_path[stack_path.length - 1][1]\n         ].passed = true;\n         cells[last_pos[0]][last_pos[1]].stone = false;\n         if (\n           stack_path[stack_path.length - 1][0] == xCount - 2 &&\n           stack_path[stack_path.length - 1][1] == yCount - 2\n         ) {\n           exploreLoop = false;\n         }\n         pos_stone[0] = stack_path[stack_path.length - 1][0];\n         pos_stone[1] = stack_path[stack_path.length - 1][1];\n         last_pos[0] = stack_path[stack_path.length - 1][0];\n         last_pos[1] = stack_path[stack_path.length - 1][1];\n         stack_path.pop();\n       } else {\n         stack_path.pop();\n       }\n     }\n\n     function init() {\n       console.log(\"init load\");\n       // aside = Math.floor(Math.random(5, 40));\n       aside = 20; //1マスのサイズ\n       (optMarginX = 0), (optMarginY = 0);\n       dirs = [0, 1, 2, 3];\n       inLoop = true;\n       exploreLoop = true;\n       xCount = Math.floor((canvas.width - margin * 2) / aside); //横数\n       // xCount = 9;\n       if (xCount % 2 == 0) {\n         xCount--;\n         optMarginX = aside / 2;\n       }\n       yCount = Math.floor((canvas.height - margin * 2) / aside); //縦数\n       if (yCount % 2 == 0) {\n         yCount--;\n         optMarginY = aside / 2;\n       }\n       cells = Array.from(new Array(xCount), () => new Array(yCount).fill(null)); //縦＊横のnull行列\n       for (let j = 0; j < yCount; j++) {\n         for (let i = 0; i < xCount; i++) {\n           cells[i][j] = new Vertex(i, j);\n         }\n       }\n       cellX = Math.floor(Math.random() * (xCount - 2) + 1);\n       if (cellX % 2 == 0) {\n         cellX++;\n       }\n       cellY = Math.floor(Math.random() * (yCount - 2) + 1);\n       if (cellY % 2 == 0) {\n         cellY++;\n       }\n       cells[cellX][cellY].state = false;\n       checkedCells.push(new Points(cellX, cellY));\n     }\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}